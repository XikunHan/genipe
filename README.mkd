[![Build Status](https://travis-ci.org/pgxcentre/gwip.svg?branch=master)](https://travis-ci.org/pgxcentre/gwip)

# gwip - A Python module to perform genome-wide imputation analysis

*Version 0.1*

The `gwip` module includes a script (named `gwip-launcher`) that automatically
runs a genome-wide imputation pipeline using *Plink*, *shapeit* and *impute2*.


## Dependencies

The tool requires a standard [Python](http://python.org/) 3 installation with
the following modules:

* `numpy` version 1.8.2 and latest
* `jinja2` version 2.7.3 and latest
* `pandas` version 0.15.2 and latest
* `setuptools` version 12.0.5 and latest

The tool requires the binaries for
[Plink](http://pngu.mgh.harvard.edu/~purcell/plink/download.shtml),
[shapeit](https://mathgen.stats.ox.ac.uk/genetics_software/shapeit/shapeit.html#download)
and [impute2](https://mathgen.stats.ox.ac.uk/impute/impute_v2.html#download).

Finally, the tool also requires a LaTeX installation to compile the automatically
generated report in PDF format.


## Testing

Basic testing was implemented for the script to merge *impute2* files resulting
from different segment (on the same chromosome). To test (after installation),
launch Python and execute the following command:

```python
>>> import gwip
>>> gwip.test()
```

Some functionalities are difficult to test, since they mostly use external
tools to perform analysis (*i.e.* *Plink*, *shapeit* and *impute2*) and it
is assumed that they were properly tested by their author.

We will try to add further tests in the future.

## Basic usage

The following options are available when launching a genome-wide imputation
analysis.

```console
$ gwip-launcher --help
usage: gwip-launcher [-h] [-v] [--debug] [--thread THREAD] --bfile PREFIX
                     [--output-dir DIR] [--use-drmaa] [--drmaa-config FILE]
                     [--preamble FILE] [--shapeit-bin BINARY]
                     [--shapeit-thread SHAPEIT_THREAD] [--plink-bin BINARY]
                     [--impute2-bin BINARY] [--segment-length BP]
                     --hap-template TEMPLATE --legend-template TEMPLATE
                     --map-template TEMPLATE --sample-file FILE
                     [--filtering-rules RULE [RULE ...]] [--probability FLOAT]
                     [--completion FLOAT] [--report-number NB]
                     [--report-title TITLE] [--report-author AUTHOR]

Execute the genome-wide imputation pipeline (gwip version 0.1).

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program's version number and exit
  --debug               Set the logging level to debug
  --thread THREAD       The number of thread [1]

Input Options:
  --bfile PREFIX        The prefix of the binary pedfiles (input data)

Output Options:
  --output-dir DIR      The name of the output directory [gwip]

HPC Options:
  --use-drmaa           Launch tasks using DRMAA
  --drmaa-config FILE   The configuration file for tasks (use this option when
                        launching tasks using DRMAA). This file should
                        describe the walltime and the number of
                        nodes/processors to use for each task.
  --preamble FILE       This option should be used when using DRMAA on a HPC
                        to load required module and set environment variables.
                        The content of the file will be added between the
                        'shebang' line and the tool command.

SHAPEIT Options:
  --shapeit-bin BINARY  The SHAPEIT binary if it's not in the path
  --shapeit-thread SHAPEIT_THREAD
                        The number of thread for phasing [1]

Plink Options:
  --plink-bin BINARY    The Plink binary if it's not in the path

IMPUTE2 Options:
  --impute2-bin BINARY  The IMPUTE2 binary if it's not in the path
  --segment-length BP   The length of a single segment for imputation [5e+06)]
  --hap-template TEMPLATE
                        The template for IMPUTE2's haplotype files (replace
                        the chromosome number by '{chrom}', e.g.
                        '1000GP_Phase3_chr{chrom}.hap.gz')
  --legend-template TEMPLATE
                        The template for IMPUTE2's legend files (replace the
                        chromosome number by '{chrom}', e.g.
                        '1000GP_Phase3_chr{chrom}.legend.gz')
  --map-template TEMPLATE
                        The template for IMPUTE2's map files (replace the
                        chromosome number by '{chrom}', e.g.
                        'genetic_map_chr{chrom}_combined_b37.txt')
  --sample-file FILE    The name of IMPUTE2's sample file
  --filtering-rules RULE [RULE ...]
                        IMPUTE2 filtering rules (if required)

IMPUTE2 Merger Options:
  --probability FLOAT   The probability threshold for no calls [0.9]
  --completion FLOAT    The site completion rate threshold [0.98]

Automatic Report Options:
  --report-number NB    The report number
  --report-title TITLE  The report title
  --report-author AUTHOR
                        The report author
```

### Real life example

The following directory tree is an example of a common imputation project.

```text
imputation_project/
├── genetic_data.bed
├── genetic_data.bim
├── genetic_data.fam
├── gwip.ini
├── preamble.sh
└── impute2_files/
    └── 1000GP_Phase3
        ├── 1000GP_Phase3_chr1.hap.gz
        ├── 1000GP_Phase3_chr1.legend.gz
        ├── 1000GP_Phase3_chr2.hap.gz
        ├── 1000GP_Phase3_chr2.legend.gz
        ├── ...
        ├── 1000GP_Phase3.sample
        ├── genetic_map_chr1_combined_b37.txt
        ├── genetic_map_chr2_combined_b37.txt
        └── ...
```

The `genetic_data.*` files are Plink's binary data containing the genotyped
samples. The directory `impute2_files` contains IMPUTE2's reference files. The
file `gwip.ini` contains the DRMAA configuration. Finally, the file
`preamble.txt` contains information to *load* before launching an external
command (*e.g.* environment variables). Sections below describes the input
files in details.

The following command would launch the complete analysis (when the working
directory is `imputation_project`):

```console
$ gwip-launcher \
>     --use-drmaa \
>     --drmaa-config gwip.ini \
>     --thread 22 \
>     --preamble preamble.sh \
>     --bfile genetic_data \
>     --legend-template impute2_files/1000GP_Phase3/1000GP_Phase3_chr{chrom}.legend.gz \
>     --hap-template impute2_files/1000GP_Phase3/1000GP_Phase3_chr{chrom}.hap.gz \
>     --map-template impute2_files/1000GP_Phase3/genetic_map_chr{chrom}_combined_b37.txt \
>     --sample-file impute2_files/1000GP_Phase3/1000GP_Phase3.sample \
>     --report-title "Genome-wide imputation" \
>     --report-number "12345" \
>     --report-author "John Doe"
[2015-02-13 13:38:38 INFO] Logging everything into 'gwip/gwip.log'
[2015-02-13 13:38:38 INFO] Task will be launched with DRMAA
[2015-02-13 13:38:38 INFO] Connecting to DB 'gwip/tasks.db'
[2015-02-13 13:38:38 INFO] Will be using SHAPEIT version v2.r790
[2015-02-13 13:38:38 INFO] Will be using IMPUTE2 version 2.3.1
[2015-02-13 13:38:38 INFO] Will be using Plink version v1.07
[2015-02-13 13:38:38 INFO] Finding markers to exclude
[2015-02-13 13:38:39 INFO]   - 2,829 special markers
[2015-02-13 13:38:39 INFO]   - 15,493 ambiguous markers removed
[2015-02-13 13:38:39 INFO]   - 0 duplicated markers removed
[2015-02-13 13:38:39 INFO]   - 123,379 markers kept
[2015-02-13 13:38:39 INFO] Excluding and splitting markers
...
```

By default, all results are save in the `gwip` directory. There will be one
directory for each chromosome. The directory `gwip/missing` will contain
missing rates for all genotyped markers.

If there were no error, the directory `gwip/report` will contain the report
automatically generated by the software (in *TeX* format). To compile the
report in PDF format, just perform the following command:

```console
$ cd gwip/report
$ make
```

If there were errors (for example, a task exceeded the execution time required
by some servers), the DRMAA configuration file `gwip.ini` can be modified to
increase the execution time of a specific task.

Since imputation is performed by segments, each output directory will contain a
directory called `final_impute2`, containing merged output files and imputation
statistics.

## Input files

Genotypes format are in Plink's binary pedfiles (*i.e.* three files with
`.bed`, `.bim` and `.fam` extensions). Those files are generated by Plink.

The `preamble` file (optional) contains environment variables and command to be
run before any task. The preamble is inserted between the *shebang*
(`#!/usr/bin/env bash`) and the task command line. The following file is an
example:

```bash
# Loading the required module
module load gcc/4.8.2

# The python virtual environment
source $HOME/softwares/python_env/bin/activate
```

The configuration file (`.ini`) describes the DRMAA task options. It is
required to specify execution time and number of nodes to be used on a HPC. By
default, the `walltime` is 15 minutes, and 1 node with 1 processor is used. If
changes are required (*e.g.* longer execution time is required), this is
specified in the `.ini` file. Each task corresponds to a section where a
general execution time can be set (`walltime` variable) along with the number
of nodes (`nodes` variable) and process per node (`ppn` variable). If a
specific chromosome require more time, this can be set using the
`chrN_walltime` variable (where `N` is the required chromosome). Finally,
segment specific execution time can be set for the imputation task (`impute2`
section). For more example, see the `.ini` file below.

```ini
[plink_exclude]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[plink_missing_rate]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[shapeit_check_1]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[plink_flip]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[shapeit_check_2]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[plink_final_exclude]
walltime = 00:10:00
nodes    = 1
ppn      = 1

[shapeit_phase]
nodes          = 1
ppn            = 1
chr1_walltime  = 04:00:00
chr2_walltime  = 05:00:00
chr3_walltime  = 04:00:00
chr4_walltime  = 04:00:00
chr5_walltime  = 04:00:00
chr6_walltime  = 04:00:00
chr7_walltime  = 03:00:00
chr8_walltime  = 03:00:00
chr9_walltime  = 03:00:00
chr10_walltime = 03:00:00
chr11_walltime = 03:00:00
chr12_walltime = 03:00:00
chr13_walltime = 03:00:00
chr14_walltime = 02:00:00
chr15_walltime = 02:00:00
chr16_walltime = 02:00:00
chr17_walltime = 02:00:00
chr18_walltime = 02:00:00
chr19_walltime = 02:00:00
chr20_walltime = 02:00:00
chr21_walltime = 01:00:00
chr22_walltime = 01:00:00

[impute2]
walltime = 03:00:00
nodes    = 1
ppn      = 1
# chr1_10000001_15000000 = 10:00:00

[merge_impute2]
nodes          = 1
ppn            = 1
chr1_walltime  = 03:00:00
chr2_walltime  = 03:00:00
chr3_walltime  = 03:00:00
chr4_walltime  = 03:00:00
chr5_walltime  = 03:00:00
chr6_walltime  = 03:00:00
chr7_walltime  = 02:30:00
chr8_walltime  = 02:30:00
chr9_walltime  = 02:00:00
chr10_walltime = 02:00:00
chr11_walltime = 02:00:00
chr12_walltime = 02:00:00
chr13_walltime = 01:30:00
chr14_walltime = 01:30:00
chr15_walltime = 01:30:00
chr16_walltime = 01:30:00
chr17_walltime = 01:30:00
chr18_walltime = 01:30:00
chr19_walltime = 01:00:00
chr20_walltime = 01:00:00
chr21_walltime = 01:00:00
chr22_walltime = 01:00:00
```

## Output files

There will be one directory for each chromosome in the output directory. This
directory will contain the `*.impute2` files (one for each segment) and a
`final_impute2` directory containing all the merged `*.impute2` files. The
directory tree below shows the content of such a directory for chromosome 22.

```text
chr22
├── ...
└── final_impute2
    ├── chr22.imputed.alleles
    ├── chr22.imputed.completion_rates
    ├── chr22.imputed.good_sites
    ├── chr22.imputed.impute2
    ├── chr22.imputed.imputed_sites
    ├── chr22.imputed.log
    └── chr22.imputed.map
```

Here is the description of the output files in the `final_impute2` directory:

* `*.imputed.alleles`: contains the two alleles for each sites located on this
  chromosome.
* `*.completion_rates`: includes the completion rate (when considering a
  certain probability threshold) for all sites (the `--probability` option).
* `*.good_sites`: contains the sites with a certain completion rate (using a
  certain probability threshold) that are complete enough to use in a
  downstream analysis (the `--completion` option).
* `*.impute2`: contains the merge imputation for this particular chromosome.
* `*.imputed_sites`: contains the list of imputed sites (*i.e.* the sites that
  were not genotyped. It is important to note that genotyped sites were indeed
  imputed (their missing calls were imputed).
* `*.map`: the mapping information for all sites on the chromosome.

## Automatic report

The pipeline provides a report containing relevant imputation statistics. This
report is located in the `report` directory. It can be compile into a PDF file
using the following `make` command:

```console
$ make && make clean
...
```

This report uses LaTeX and the `*.tex` file can be modified to add project
specific information.

